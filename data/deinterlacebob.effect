
uniform float4x4 ViewProj;
uniform texture2d image;
uniform float4x4 color_matrix;
uniform float3 color_range_min = {0.0, 0.0, 0.0};
uniform float3 color_range_max = {1.0, 1.0, 1.0};

uniform texture2d target;
uniform float4 color = {1.0, 1.0, 1.0, 1.0};

uniform float texture_width;
uniform float texture_height;
uniform float field1;

sampler_state def_sampler {
	Filter   = Point;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertOut {
	float4 pos : POSITION;
	float4 col : COLOR;
	float2 uv  : TEXCOORD0;
	float2 t1  : TEXCOORD1;
	float2 t2  : TEXCOORD2;
};

VertOut VSDefault(VertInOut vert_in)
{
	VertOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	vert_out.col = color;


	vert_out.t1 = float2(vert_in.uv.x, vert_in.uv.y + (1.0 / texture_height));
	vert_out.t2 = float2(vert_in.uv.x, vert_in.uv.y - (1.0 / texture_height));
	return vert_out;
}

float4 PSDrawBare(VertOut vert_in) : TARGET
{

	float blend1 = floor(frac((vert_in.uv.y * texture_height + field1) * 0.5) + 0.5);
	float4 t1  = image.Sample(def_sampler, vert_in.uv);
	float4 t2  = image.Sample(def_sampler, vert_in.t1);
	float4 t3  = image.Sample(def_sampler, vert_in.t2);

	return t1 * blend1 + (t2 + t3) * 0.5 * (1.0 - blend1);
}

float4 PSDrawMatrix(VertOut vert_in) : TARGET
{


	float4 yuv = PSDrawBare(vert_in);
	yuv.xyz = clamp(yuv.xyz, color_range_min, color_range_max);
	return saturate(mul(float4(yuv.xyz, 1.0), color_matrix));
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawBare(vert_in);
	}
}

technique DrawMatrix
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDrawMatrix(vert_in);
	}
}
